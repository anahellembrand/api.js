// üöÄ Verifica se a extens√£o e o proxy est√£o ativos antes de liberar o acesso
document.addEventListener("DOMContentLoaded", () => {
    chrome.runtime.sendMessage({ checkProxy: true }, (response) => {
        if (!response || !response.proxyActive) {
            alert("‚ö†Ô∏è O proxy est√° desativado! Ative a extens√£o para acessar os sites.");
            window.location.href = "https://sua-extensao.com/ativar"; // üîπ Pode ser uma p√°gina de instru√ß√£o
        } else {
            console.log("‚úÖ Proxy ativo! Acesso permitido.");
        }
    });

    // üîπ Verifica se o usu√°rio est√° autenticado
    let userEmail = localStorage.getItem("userEmail") || sessionStorage.getItem("userEmail");

    if (!userEmail || userEmail.trim() === "") {
        console.warn("‚ö†Ô∏è Usu√°rio n√£o autenticado. Redirecionando para login...");
        window.location.href = "/login.html"; // üîπ Caminho absoluto para evitar erro 404
        return;
    }

    console.log("‚úÖ Usu√°rio autenticado:", userEmail);
    document.getElementById("userEmail").innerText = userEmail;

    // üîπ Defini√ß√£o dos servi√ßos dispon√≠veis
    const services = [
        { name: "Adobe Stock", url: "https://stock.adobe.com" },
        { name: "Envato", url: "https://elements.envato.com" },
        { name: "Creative Fabrica", url: "https://www.creativefabrica.com" },
        { name: "Pacdora", url: "https://www.pacdora.com" },
        { name: "Vecteezy", url: "https://www.vecteezy.com" },
        { name: "Design Bundles", url: "https://designbundles.net" }
    ];

    // üîπ Cria os bot√µes dinamicamente e ativa o proxy apenas ao clicar
    const buttonsContainer = document.getElementById("buttons");
    services.forEach(service => {
        const button = document.createElement("button");
        button.innerText = service.name;
        button.onclick = () => {
            chrome.runtime.sendMessage({ activateProxy: true }, (response) => {
                if (!response || !response.success) {
                    alert("‚ö†Ô∏è Erro ao ativar o proxy. Verifique sua conex√£o!");
                    return;
                }

                console.log(`üåç Acessando ${service.name} via Proxy.`);
                window.open(service.url, "_blank");

                // üîπ Desativar o proxy ap√≥s 3 minutos para economizar banda
                setTimeout(() => {
                    chrome.runtime.sendMessage({ deactivateProxy: true });
                }, 180000); // 3 minutos
            });
        };
        buttonsContainer.appendChild(button);
    });

    // üîí Bloqueia Inspecionar Elemento
    document.addEventListener("contextmenu", event => event.preventDefault());
    document.addEventListener("keydown", event => {
        if (
            event.key === "F12" || 
            (event.ctrlKey && event.shiftKey && event.key === "I") || 
            (event.ctrlKey && event.shiftKey && event.key === "J") || 
            (event.ctrlKey && event.key === "U")
        ) {
            event.preventDefault();
            console.warn("üîí Tentativa de abrir DevTools bloqueada!");
        }
    });

    // üîê Remove bot√µes de logout dentro dos iframes para impedir sa√≠da das contas
    const observer = new MutationObserver(() => {
        const iframes = document.getElementsByTagName("iframe");
        for (let iframe of iframes) {
            try {
                const logoutButtons = iframe.contentWindow.document.querySelectorAll("a[href*='logout'], button.logout");
                logoutButtons.forEach(button => button.remove());
            } catch (e) {
                console.warn("‚ö†Ô∏è N√£o foi poss√≠vel acessar um iframe para remover logout.");
            }
        }
    });

    observer.observe(document.body, { childList: true, subtree: true });
});
